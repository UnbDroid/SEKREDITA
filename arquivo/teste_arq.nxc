byte handle = 0;
#define FILE_NAME "arq.dat"
#define FILE_SIZE 11

string entrada, saida; //Interface vetor de char e string no arquivo
char direcao[9];

void le_arq(){

    char r;
	unsigned int size;
	unsigned int rtn_code = OpenFileRead(FILE_NAME, size, handle);

	//Linhas de teste
	ClearLine(LCD_LINE1);
	NumOut(0, LCD_LINE1, rtn_code);
	Wait(1500);
	//Fim linhas de teste


   // Início da leitura dos valores
   for (int i = 0; i < 9; i++){
   
	   	rtn_code = Read(handle, r);

	    switch (rtn_code){
	     	 case LDR_SUCCESS:
	       		direcao[i] = r;
	        	break;
	    	case LDR_ENDOFFILE:
	     		TextOut(0, LCD_LINE1, "ERRO, EOF!");
	     		Wait(5000);
	     		Stop(1);
	        	break;
	      default:
	        	TextOut(0, LCD_LINE1, "ERRO!");
	    }
   }

	saida = ByteArrayToStr(direcao);

	//Linhas de teste
	TextOut(0, LCD_LINE1, saida);
   	Wait(1500);
   	ClearScreen();
   	//Fim linhas de teste

   	CloseFile(handle);


}

void cria_arq() {
	unsigned int rtn_code = CreateFile(FILE_NAME, FILE_SIZE, handle);
	unsigned int esc;

	direcao[0] = '*';
	direcao[1] = '*';
	direcao[2] = '*';
	direcao[3] = '*';
	direcao[4] = '*';
	direcao[5] = '*';
	direcao[6] = '*';
	direcao[7] = '*';
	direcao[8] = '*';

	entrada = ByteArrayToStr(direcao);

	switch (rtn_code) {
		case LDR_SUCCESS:
			esc = Write(handle, entrada);
			if (esc == LDR_SUCCESS) TextOut (0, LCD_LINE4, "Escreveu!");
			else {
				NumOut(0, LCD_LINE4, esc);
				TextOut(0, LCD_LINE5, "Não escreveu!");
			}
			break;
		case LDR_FILEISBUSY:
			TextOut(0, LCD_LINE2, "File is Busy");
			break;
		case LDR_FILENOTFOUND:
			TextOut(0, LCD_LINE2, "File not found");
			break;
		case LDR_FILEEXISTS:
			TextOut(0, LCD_LINE2, "File exists");
			break;
		case LDR_FILEISFULL:
			TextOut(0, LCD_LINE2, "File is full");
			break;

		default:
			NumOut (0, LCD_LINE2, rtn_code);
			TextOut(0, LCD_LINE4, "Erro!");
			break;
	}

	CloseFile(handle);

	//Linhas de teste
	Wait(1500);
	ClearScreen();
	//Fim linhas de teste
	
}

void deleta () {
	unsigned int rtn_code = DeleteFile(FILE_NAME);
	if(rtn_code == LDR_SUCCESS)	TextOut(0, LCD_LINE2, "Apagado!");
	else if (rtn_code == LDR_FILENOTFOUND) TextOut(0, LCD_LINE1, "Ja apagado!"); 
	else TextOut(0, LCD_LINE1, "Erro!");

	//Linhas de teste
	Wait(1500);
	ClearScreen();
	//Fim linhas de teste
	
}

void reescreve () {
	unsigned int esc;
	unsigned int rtn_code = DeleteFile(FILE_NAME);
	int i;

	entrada = ByteArrayToStr(direcao);

	if(rtn_code == LDR_SUCCESS)	TextOut(0, LCD_LINE2, "Deletou!");
	else if (rtn_code == LDR_FILENOTFOUND) TextOut(0, LCD_LINE1, "Ja apagado!"); 
	else TextOut(0, LCD_LINE1, "Erro!");

	//Linhas de teste
	Wait(2000);
	ClearScreen();
	//Fim linhas de teste

	rtn_code = CreateFile(FILE_NAME, FILE_SIZE, handle);
		switch (rtn_code) {
		case LDR_SUCCESS:
				esc = Write(handle, entrada);
				if (esc == LDR_SUCCESS) TextOut (0, LCD_LINE4, "Escreveu!");
				else {
					NumOut(0, LCD_LINE4, esc);
					TextOut(0, LCD_LINE5, "Não escreveu!");
				}
			break;
		case LDR_FILEISBUSY:
			TextOut(0, LCD_LINE2, "File is Busy");
			break;
		case LDR_FILENOTFOUND:
			TextOut(0, LCD_LINE2, "File not found");
			break;
		case LDR_FILEEXISTS:
			TextOut(0, LCD_LINE2, "File exists");
			break;
		case LDR_FILEISFULL:
			TextOut(0, LCD_LINE2, "File is full");
			break;

		default:
			NumOut (0, LCD_LINE2, rtn_code);
			TextOut(0, LCD_LINE4, "Erro!");
			break;
	}

	CloseFile(handle);

	//Linhas de teste
	Wait(1500);
	ClearScreen();
	//Fim linhas de teste
}

task main () {


	ClearScreen();
	deleta();
	cria_arq();
	le_arq();
	ClearScreen();
	reescreve();
	le_arq();
	Wait(3000);
	ClearScreen();




}
