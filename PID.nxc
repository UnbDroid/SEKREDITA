/*
    Entradas:     A função não tem argumentos.
    Saídas:       A função não tem retornos.
    Comentários:  Essa função implementa o controle de posição angular no plano XZ(paralelo ao chão) de um robô móvel
                  Ela utiliza o erro entre a medição dos encoders de cada motor para ajustar a potência mandanda para
                  cada motor de modo a tentar manter o robô em uma trajetória linear.
*/

#define motor_e OUT_C        // e -> esquerdo
#define motor_d OUT_A        // d -> direito
#define motor_ambos OUT_AC
#define potencia_inicial 50 // Potência na qual o controle vai tentar se manter em torno
#define kp 3                // Constante proporcional
#define kd 1                // Constante derivativa
#define ki 3                // Constante integral

task main() {

  float rotacao_e, rotacao_d, erro, correcao, integrativo, derivativo, historico = 0, ultimo_erro = 0;
  float potencia_e, potencia_d;

  while(1){

    // Pega a cada iteração a atual rotação de cada motor
    rotacao_e = MotorRotationCount(motor_e);
    rotacao_d = MotorRotationCount(motor_d);

    // Nos diz o erro entre as rotações das rodas
    erro = rotacao_d - rotacao_e;

    // Somatório dos erros durante a execução do código, da menos importancia para o histório e mais para o erro atual
    historico = 0.666 * historico + erro;

    // Anti Wind-Up, serve para que o erro integral não exploda
    if(integrativo > 300){
      integrativo = 300;
    }else if(integrativo < -300){
      integrativo = -300;
    }

    // Calcula o erro instantâneo
    derivativo = (erro - ultimo_erro);
    ultimo_erro = erro;

    // Multiplica as constantes do controle PID com seus respectivos tratamentos e soma as contribuições
    correcao = (kp*erro) + (kd*derivativo) + (ki*integrativo);

    // Calcula a potencia de correção em torno da potencia inicial desejada
    potencia_e = potencia_inicial - correcao;
    potencia_d = potencia_inicial + correcao;

    // OnRev foi utilizado graças a orientação invertida dos motores do nosso robô.
    OnRev(motor_e, potencia_e);
    OnRev(motor_d, potencia_d);
  }
}
