#define BT_CONN 1
#define INBOX 2
#define OUTBOX 1
#define r_roda 4.1 //raio da roda, em cm
#define d_rodas 16 //distãncia de uma roda a outra, em cm
#define motor_direito OUT_A
#define motor_esquerdo OUT_C
#define ambos_motores OUT_AC
#define Ultra_frente IN_1
#define Giroscopio IN_2
#define HT_direita IN_3
#define HT_esquerda IN_4
#define Distancia_do_Boneco 20
#define esquerda 1
#define frente 2
#define direita 3
#define PRETO    1
#define AZUL     2
#define VERDE    3
#define AMARELO  4
#define VERMELHO 5
#define BRANCO   6
#define FORA     7
#define maximo_integrador 100   // Valor máximo para o estado integrativo
#define minimo_integrador -100  // Valor mínimo para o estado integrativo
#define potencia_inicial 60     // Valor de potencia inicial passada para o motor
#define kp 1  // Ganho proporcional
#define ki 0  // Ganho integrativo
#define kd 0  // Ganho derivativo
#define tamanho_da_rampa 100
#define distancia_chao 14


float erro_total_roda_direita = 0;  // Variáveis para manter o PID funcionando após consertar a rota
float erro_total_roda_esquerda = 0;
float resto;
int Direita = 3;
int Esquerda = 1;
int fiz_a_tarefa = 1;
int nao_fiz_a_tarefa = 0;
int ultima_cor_suposta = 0;
int ultima_direcao_suposta = 0;
int lado_vermelho = 0;
int lado_verde = 0;
int lado_azul = 0;
int abre_a_porta = 10;
int fecha_a_porta = 11;
byte color_1, verm_1, verd_1, azul_1, branco_1, num_1, color_2, verm_2, verd_2, azul_2, branco_2, num_2;

void gira_90(int lado);
void andar_reto();
sub BTCheck(int conn); // Verifica se existe uma conexão bluetooth


sub BTCheck(int conn){
	if (!BluetoothStatus(conn)==NO_ERR){
		ClearScreen();
		TextOut(5,LCD_LINE2,"Erro");
		Wait(1000);
		Stop(true);
	 }
}

void andar_reto(){ //Função que implementa PID e checa as condições de parada

		float rotacao_direita, rotacao_esquerda, correcao, erro_tragetoria, historico_erro = 0, ultimo_erro = 0;
		float termo_proporcional = 0, termo_integrativo = 0, termo_derivativo = 0;
		int flag_do_boneco, teste;

		OnFwd(ambos_motores, potencia_inicial);

		//Verifica se o robô está caindo da pista e corrige isso
		//procura_buraco();

		// Verifica se há bonecos nas laterais e entra na rotina de captura
		//flag_do_boneco = procura_boneco();
		//if(flag_do_boneco !=0 ){
			//pega_boneco(flag_do_boneco);
		//}

		//Verifica se há cor diferente de branco no chão e corrige a orientação do robô se necessário
		//entra_reto_na_cor();

    	// sai_da_cor(verifica_cor());

		rotacao_direita = MotorRotationCount (motor_direito) - erro_total_roda_direita;   // Pega quantas voltas o motor direito deu
    rotacao_esquerda = MotorRotationCount (motor_esquerdo) - erro_total_roda_esquerda; // Pega quantas voltas o motor esquerdo deu

		erro_tragetoria = rotacao_direita - rotacao_esquerda;   // Erro nas rotações, idealmente deveria ser zero para que o robô ande reto
		termo_proporcional = kp * erro_tragetoria;
		historico_erro += erro_tragetoria; // Mantém o histórico de erros para fazer a parte integrativa do PID

		if(historico_erro > maximo_integrador){                 // Limita o histórico de erros dentro de um limite inferior e superior
				historico_erro = maximo_integrador;
		}else if(historico_erro < minimo_integrador){
				historico_erro = minimo_integrador;
		}

		termo_integrativo = ki * historico_erro;

		termo_derivativo = kd * (ultimo_erro - erro_tragetoria);
		ultimo_erro = erro_tragetoria;                            // Atualiza o erro passado

		correcao = termo_derivativo + termo_integrativo + termo_proporcional;  // Aqui vc deu todos os termos a correcao
		if(correcao != 0){
			OnFwd(motor_esquerdo, correcao + potencia_inicial);
			OnFwd(motor_direito, potencia_inicial);
		}else{
			OnFwd(motor_esquerdo,potencia_inicial);
			OnFwd(motor_direito, potencia_inicial);
		}
}

void gira_90(int lado){ //Gira 90° ou para esquerda ou para direita, de acordo com o sinal no argumento (positivo para direita e negativo para esquerda)

  float angle = 0, gyro = 0;
  float erro_direito, erro_esquerdo;
  unsigned long time, prev_time;
  time = CurrentTick();

  Off(ambos_motores);
	erro_esquerdo = MotorRotationCount(motor_esquerdo);
	erro_direito = MotorRotationCount(motor_direito);

  if(lado == direita){
    OnFwd(motor_direito, -70);
    OnFwd(motor_esquerdo, 70);
    while(angle <= 90){
      prev_time = time;
      time = CurrentTick();
      gyro = SensorHTGyro(Giroscopio);
      angle += gyro * (time - prev_time)/1000.0;
    }
  }else if(lado == esquerda){
    Off(ambos_motores);
    OnFwd(motor_esquerdo, -70);
    OnFwd(motor_direito,70);
    while(angle >= -90){
      prev_time = time;
      time = CurrentTick();
      gyro = SensorHTGyro(Giroscopio);
      angle += gyro * (time - prev_time)/1000.0;
    }
  }
  erro_direito = MotorRotationCount(motor_direito) - erro_direito;
  erro_esquerdo = MotorRotationCount(motor_esquerdo) - erro_esquerdo;
  erro_total_roda_direita += erro_direito;
  erro_total_roda_esquerda += erro_esquerdo;
}

task main(){

	SetSensorLowspeed(Ultra_frente);

	while(ReceiveRemoteNumber(INBOX, true, nao_fiz_a_tarefa)){
		andar_reto();
	}

	Off(ambos_motores);
	if(ReceiveRemoteNumber(INBOX, true, Direita)){
		gira_90(direita);
		gira_90(direita);
	}
	SendRemoteNumber(BT_CONN,OUTBOX, abre_a_porta);
	while(!ReceiveRemoteNumber(INBOX, true, fiz_a_tarefa)){ //Mandar 1 significa fez a tarefa
	}
	gira_90(esquerda);

	while(SensorUS(Ultra_frente)>10){
		andar_reto(); // Adaptar para procurar o boneco
	}
	Off(ambos_motores);
	SendRemoteNumber(BT_CONN, OUTBOX, fecha_a_porta);
}