#define BT_CONN 1
#define INBOX 1
#define OUTBOX 2
#define Ultra_Boneco_Esquerda IN_1
#define Ultra_Boneco_Direita IN_2
#define Ultra_Chao_Direta IN_3
#define Ultra_Chao_Esquerda IN_4
#define PORTA OUT_A
#define RAMPA OUT_B
#define TRAVA OUT_C
#define GARRA OUT_ABC
#define Distancia_do_Boneco 20
#define esquerda 1
#define frente 2
#define direita 3
#define PRETO    1
#define AZUL     2
#define VERDE    3
#define AMARELO  4
#define VERMELHO 5
#define BRANCO   6
#define FORA     7

sub BTCheck(int conn){
    if (!BluetoothStatus(conn)==NO_ERR){
        TextOut(5,LCD_LINE2,"Error");
        Wait(1000);
        Stop(true);
    }
}

void abre_porta(){
	ResetMotorRotationCount(PORTA);
	while(MotorRotationCount(PORTA)>= -90){
		OnFwd(PORTA, -50);
	}
	Off(PORTA);


}
void pega_boneco(int lado){
	ResetMotorRotationCount(PORTA);
	while(MotorRotationCount(PORTA) >= -90){
		OnFwd(PORTA, -50);
	}
		OnFwd(PORTA, -10);
	while(MotorRotationCount(RAMPA) <= 20){
		OnFwd(RAMPA, 50);
	}
	while(MotorRotationCount(TRAVA) >= -180){
				OnFwd(TRAVA, -20);
			}

			Off(RAMPA);
			Off(TRAVA);
}

task main(){

	SetSensorLowSpeed(Ultra_Boneco_Direita);
	SetSensorLowSpeed(Ultra_Boneco_Esquerda);

	while(1){
		while(SensorUS(Ultra_Boneco_Esquerda)> Distancia_do_Boneco && SensorUS(Ultra_Boneco_Direita) > Distancia_do_Boneco){
			SendRemoteNumber(BT_CONN, OUTBOX, 0);
		}
		if(SensorUS(Ultra_Boneco_Direita)<= Distancia_do_Boneco){
			SendRemoteNumber(BT_CONN, OUTBOX, direita);
		}else{		
			SendRemoteNumber(BT_CONN, OUTBOX, esquerda);
		}

		while(!ReceiveRemoteString(INBOX, true, "Abre Porta")){
		}

		abre_porta();

		SendRemoteNumber(BT_CONN, OUTBOX, 1); //Mandar 1 significa fez a tarefa
		while(!ReceiveRemoteString(INBOX, true, "Fecha Porta")){ 
		}
		pega_boneco();
	}
}