#define motor_e OUT_C        // Motor esquerdo
#define motor_d OUT_A        // Motor direito
#define motor_ambos OUT_AC
#define potencia_inicial 65 // PotÃªncia de referÃªncia, usar OnRev para ir para frente
#define US_chao_d IN_1      // SensorUS voltado para o chÃ£o direito
#define US_chao_e IN_2      // SensorUS voltado para o chÃ£o esquerdo
#define HT_direita IN_3   // Sensor de cor da direita
#define HT_esquerda IN_4  // Sensor de cor da esquerda
#define PRETO    1
#define AZUL     2
#define VERDE    3
#define AMARELO  4
#define VERMELHO 5
#define BRANCO   6
#define FORA     6
#define esquerda 1
#define frente 2
#define direita 3
#define distancia_do_chao 9.8
#define FILE_NAME "arq.dat"
#define FILE_SIZE 11


float leitura_US_e[3] ={0,0,0,0}, leitura_US_d[3] ={0,0,0,0};
// VariÃ¡veis do filtro de US
int contador = 0;
float media_US_d,media_US_e;

byte color_1, verm_1, verd_1, azul_1, branco_1, num_1, color_2, verm_2, verd_2, azul_2, branco_2, num_2;
int tentativa = 0, ultima_direcao = 0, ultimo_lado = PRETO, cor_1=0, cor_2=0, cor_3=0;
char direcao[9];
byte handle = 0;
string entrada, saida; //Interface vetor de char e string no arquivo

//          Esq  Fre  Dir
//Vermelho  [0]  [1]  [2]
//   Verde  [3]  [4]  [5]
//    Azul  [6]  [7]  [8]

void gira90(int lado);
void gira180();
int le_cor(int lado);
void Nao_Cai(int lado);
void le_arq();

float pot(float a, int b) { // PotenciaÃ§Ã£o
  int i;
  float r=1;

  for(i=0; i<b; i++) {
    r *= a;
  }

  return r;
}

void grava_certo(){
  int contador;
  if(ultimo_lado == VERMELHO){
    cor_1=1;
    contador = 0;
    while(direcao[contador] == '0'){
      contador++;
    }
    direcao[0] = '0';
    direcao[1] = '0';
    direcao[2] = '0';
    direcao[contador] = '1';
    direcao[contador + 3] = '0';
    direcao[contador + 6] = '0';
  }else if(ultimo_lado == VERDE){
    cor_2=1;
    contador = 3;
    while(direcao[contador] == '0'){
      contador++;
    }
    direcao[3] = '0';
    direcao[4] = '0';
    direcao[5] = '0';
    direcao[contador] = '1';
    direcao[contador + 3] = '0';
    direcao[contador - 3] = '0';
  }else if(ultimo_lado == AZUL){
    cor_3=1;
    contador = 6;
    while(direcao[contador] == '0'){
      contador++;
    }
    direcao[6] = '0';
    direcao[7] = '0';
    direcao[8] = '0';
    direcao[contador] = '1';
    direcao[contador - 3] = '0';
    direcao[contador - 6] = '0';
  }
}

void entra_na_cor(){

  Off(motor_ambos);

  if(le_cor(esquerda) != BRANCO){
    while(le_cor(direita) == BRANCO){
      OnRev(motor_d, potencia_inicial);
    }
  }else if(le_cor(direita) != BRANCO){
    while(le_cor(esquerda) == BRANCO){
      OnRev(motor_e, potencia_inicial);
    }
  }

  ResetRotationCount(motor_ambos);
  Wait(100);

}

void sai_da_cor(){

  Off(motor_ambos);
  Wait(200);

  while(le_cor(direita) != BRANCO || le_cor(esquerda) != BRANCO){
    leitura_US_d[contador%4] = SensorUS(US_chao_d);
    leitura_US_e[contador%4] = SensorUS(US_chao_e);
    contador++;

    for(i = 0;i < 3;i++){
      media_US_e += leitura_US_e[i];
      media_US_d += leitura_US_d[i];
    }

    if(media_US_e > distancia_do_chao){
      Off(motor_ambos);
      Nao_Cai(esquerda);
    }else if(media_US_d > distancia_do_chao){
      Off(motor_ambos);
      Nao_Cai(direita);
    }
    OnRev(motor_e, potencia_inicial + 5);
    OnRev(motor_d, potencia_inicial - 5);
  }

  Off(motor_ambos);

  ResetRotationCount(motor_ambos);
  Wait(100);

}

void grava_preto(){
  int contador;
  
  ultima_direcao = 1;

  if(ultimo_lado == VERMELHO){
    contador = 0;
    while(direcao[contador] == '0'){
      contador++;
      ultima_direcao++;
    }
    direcao[contador] = '0';
  }else if(ultimo_lado == VERDE){
    contador = 3;
    while(direcao[contador] == '0'){
      contador++;
      ultima_direcao++;
    }
    direcao[contador] = '0';
  }else if(ultimo_lado == AZUL){
    contador = 6;
    while(direcao[contador] == '0'){
      contador++;
      ultima_direcao++;
    }
    direcao[contador] = '0';
  }
}

void teste_cor(int cor){
  int lado = 1;
  int contador;
  switch (cor){
    case VERMELHO:
      if(ultimo_lado != PRETO && !cor_1){
        grava_certo();
      }
      ultimo_lado = VERMELHO;
      contador = 0;
      if(tentativa == 0){
        while(direcao[contador] == '0'){
           contador++;
           lado++;
        }
        gira90(lado);
      }else{
        if(tentativa == 1){
          tentativa = 0;
          if(ultima_direcao == frente){
            gira90(esquerda);
          }else if(direcao[1] != '0'){
            gira90(esquerda);
          }
        }
      }
      break;
    case VERDE:
      if(ultimo_lado != PRETO && !cor_2){
        grava_certo();
      }
      ultimo_lado = VERDE;
      contador = 3;
      if(tentativa == 0){
        while(direcao[contador] == '0'){
           contador++;
           lado++;
        }
        gira90(lado);
      }else{
        if(tentativa == 1){
          tentativa = 0;
          if(ultima_direcao == frente){
            gira90(esquerda);
          }else if(direcao[4] != '0'){
            gira90(esquerda);
          }
        }
      }
    break;
    case AZUL:
      if(ultimo_lado != PRETO){
        grava_certo();
      }
      ultimo_lado = AZUL;
      contador = 6;
      if(tentativa == 0){
        while(direcao[contador] == '0'){
           contador++;
           lado++;
        }
        gira90(lado);
      }else{
        if(tentativa == 1){
          tentativa = 0;
          if(ultima_direcao == frente){
            gira90(esquerda);
          }else if(direcao[1] != '0'){
            gira90(esquerda);
          }
          // contador++;
          // tentativa = 0;
          // if(direcao[contador+1] != '0'){
          //   gira90(esquerda);
          // }
        }
      }
    break;
  }
}

void gira90(int lado){

  ResetRotationCount(motor_ambos);
  Wait(100);

  if(lado == esquerda){
    while((MotorRotationCount(motor_d)) > -245){
      OnRev(motor_e, -potencia_inicial);
      OnRev(motor_d, potencia_inicial);
    }
  }else if(lado == direita){
    while((MotorRotationCount(motor_d)) < 245){
      OnRev(motor_e, potencia_inicial);
      OnRev(motor_d, -potencia_inicial);
    }
  }
  ResetRotationCount(motor_ambos);
  Wait(100);
}

void gira180(){
  ResetRotationCount(motor_ambos);
  Wait(100);

  while(MotorRotationCount(motor_d) > -500){
    OnRev(motor_e, -potencia_inicial-5);
    OnRev(motor_d, potencia_inicial+5);
  }

  ResetRotationCount(motor_ambos);
  Wait(100);

}

int le_cor (int lado) {

  float sum, m, var; //m Ã© a mÃ©dia aritmÃ©tica, var Ã© a variÃ¢ncia e sum Ã© a soma
  float verm, verd, azul;
  if(lado == direita){

  ReadSensorHTColor2Active(HT_direita, num_1, verm_1, verd_1, azul_1, branco_1);
  }
  else if (lado == esquerda) {
    ReadSensorHTColor2Active(HT_esquerda, num_1, verm_1, verd_1, azul_1, branco_1);
  }
  sum = verm_1 + azul_1 + verd_1;
  m = sum/3;
  verm = verm_1;
  verd = verd_1;
  azul = azul_1;
  var = ( pot(verm - m , 2) + pot(verd - m , 2) + pot(azul - m , 2) )/3;

  if( var >= pot(255-m , 2)) {
    if (var<9) return BRANCO;
  }

  if(verm > azul && verd > azul && azul < m && pot(verm - m , 2) < var && verm > m && verd > m && pot (verd - m , 2) < var && var > 9) return AMARELO;
  if( pot(verm - m , 2) > var && verm > m && var > 9 ) return VERMELHO;
  if( pot(verd - m , 2) > var && verd > m && var > 9) return VERDE;
  if( pot ( azul - m , 2) > var && azul > m && var > 9) return AZUL;
  if( m <= 50 && var <= 5) return PRETO;

  return BRANCO;
}

void Nao_Cai(int lado){

  Off(motor_ambos);
  Wait(700);

  // Enquanto estÃ¡ caindo
  if(lado == direita){
    ResetRotationCount(motor_ambos);
    Wait(100);
    // Para voltar para a pista Ã© preciso girar a roda direita para frente e a esquerda para trÃ¡s
    while(MotorRotationCount(motor_e) < 40){
      OnFwd(motor_d, potencia_inicial);
      OnFwd(motor_e, potencia_inicial);
    }
    Off(motor_ambos);
    while(MotorRotationCount(motor_e)<115){
      OnFwd(motor_e, potencia_inicial);
    }
  }else if(lado == esquerda){
    ResetRotationCount(motor_ambos);
    Wait(100);
    // Para voltar para a pista Ã© preciso girar a roda esquerda para frente e a direita para trÃ¡s
    while(MotorRotationCount(motor_d) < 40){
      OnFwd(motor_e, potencia_inicial);
      OnFwd(motor_d, potencia_inicial);
     }
     Off(motor_ambos);
     while(MotorRotationCount(motor_d)<115){
       OnFwd(motor_d, potencia_inicial);
     }
  }
  Off(motor_ambos);
  Wait(500);
  ResetRotationCount(motor_ambos);
  Wait(100);
}

void centraliza(){

  ResetRotationCount(motor_ambos);
  Wait(100);

  while(MotorRotationCount(motor_d)>-140){
    OnRev(motor_d, potencia_inicial);
    OnRev(motor_e, potencia_inicial + 10);
  }
  Off(motor_ambos);

}

void checa_cor(int ht_e){

  switch (ht_e){

    case PRETO:
      Off(motor_ambos);
      Wait(600);
      tentativa++;
      grava_preto();
      ultimo_lado = PRETO;
      gira180();
      sai_da_cor();
      break;
    case VERMELHO:
      centraliza();
      Off(motor_ambos);
      Wait(600);
      teste_cor(VERMELHO);
      sai_da_cor();
      break;
    case VERDE:
      centraliza();
      Off(motor_ambos);
      Wait(600);
      teste_cor(VERDE);
      sai_da_cor();
      break;
    case AZUL:
      centraliza();
      Off(motor_ambos);
      Wait(600);
      teste_cor(AZUL);
      sai_da_cor();
      break;

  }
}

void Andar(){
  /*
      Entradas:     A funÃ§Ã£o nÃ£o tem argumentos.
      SaÃ­das:       A funÃ§Ã£o nÃ£o tem retornos.
      ComentÃ¡rios:  Essa funÃ§Ã£o implementa o controle de posiÃ§Ã£o angular no plano XZ(paralelo ao chÃ£o) de um robÃ´ mÃ³vel
                    Ela utiliza o erro entre a mediÃ§Ã£o dos encoders de cada motor para ajustar a potÃªncia mandanda para
                    cada motor de modo a tentar manter o robÃ´ em uma trajetÃ³ria linear. Essa funÃ§Ã£o roda atÃ© que algum
                    sensor Ultrasom retorne um valor que acuse cair da pista entÃ£o chama a funÃ§Ã£o para corrigir isso
  */

  // Constantes do controle

    float kp = 0.5;
    float ki = 0.1;
    float kd = 1;

    int lado = 0;

    float ht_e, ht_d;

    // VariÃ¡veis utilizadas nos calculos
    float rotacao_e, rotacao_d, erro, correcao, derivativo, integrativo = 0, ultimo_erro = 0;
    float potencia_e, potencia_d;

    // VariÃ¡veis utilizadas para filtrar a distancia do chÃ£o
    int i;

    // Enquanto nÃ£o estÃ¡ caindo
    while(lado == 0){

      if(le_cor(esquerda) != BRANCO || le_cor(direita) != BRANCO){
        Off(motor_ambos);
        entra_na_cor();
        checa_cor(le_cor(direita));
      }

      // Nos diz o erro entre as rotaÃ§Ãµes das rodas
      erro = MotorRotationCount(motor_d) - MotorRotationCount(motor_e);

      // SomatÃ³rio dos erros durante a execuÃ§Ã£o do cÃ³digo, da menos importancia para o histÃ³rio e mais para o erro atual
      integrativo = 0.666 * integrativo + erro;

      // Anti Wind-Up, serve para que o erro integral nÃ£o exploda
      if(integrativo > 15){
        integrativo = 15;
      }else if(integrativo < -15){
        integrativo = -15;
      }

      // Calcula o erro instantÃ¢neo
      derivativo = (erro - ultimo_erro);
      ultimo_erro = erro;

      // Multiplica as constantes do controle PID com seus respectivos tratamentos e soma as contribuiÃ§Ãµes
      correcao = (kp*erro) + (kd*derivativo) + (ki*integrativo);

      // Calcula a potencia de correÃ§Ã£o em torno da potencia inicial desejada
      potencia_e = potencia_inicial - correcao;
      potencia_d = potencia_inicial + correcao;

      // OnRev foi utilizado graÃ§as a orientaÃ§Ã£o invertida dos motores do nosso robÃ´.
      OnRev(motor_e, potencia_e);
      OnRev(motor_d, potencia_d);
      // Atualiza a leitura dos US_chao

      leitura_US_d[contador%4] = SensorUS(US_chao_d);
      leitura_US_e[contador%4] = SensorUS(US_chao_e);
      contador++;

      for(i = 0;i < 3;i++){
        media_US_e += leitura_US_e[i];
        media_US_d += leitura_US_d[i];
      }

      media_US_d = media_US_d/4;
      media_US_e = media_US_e/4;


      ClearScreen();
      NumOut(0,LCD_LINE1,media_US_e);
      NumOut(0,LCD_LINE2,media_US_d);

      if(media_US_e > distancia_do_chao){
        lado = esquerda;
      }else if (media_US_d > distancia_do_chao){
        lado = direita;
      }
    }
    // Se o programa sair do laÃ§o anterior ele estÃ¡ caindo
    Nao_Cai(lado);
}

void le_arq(){

    char r;
  unsigned int size;
  unsigned int rtn_code = OpenFileRead(FILE_NAME, size, handle);

  //Linhas de teste
  ClearLine(LCD_LINE1);
  NumOut(0, LCD_LINE1, rtn_code);
  Wait(1500);
  //Fim linhas de teste


   // InÃ­cio da leitura dos valores
   for (int i = 0; i < 9; i++){

      rtn_code = Read(handle, r);

      switch (rtn_code){
         case LDR_SUCCESS:
            direcao[i] = r;
            break;
        case LDR_ENDOFFILE:
          TextOut(0, LCD_LINE1, "ERRO, EOF!");
          Wait(5000);
          Stop(1);
            break;
        default:
            TextOut(0, LCD_LINE1, "ERRO!");
      }
   }

  saida = ByteArrayToStr(direcao);

    CloseFile(handle);


}
void cria_arq() {
  unsigned int rtn_code = CreateFile(FILE_NAME, FILE_SIZE, handle);
  unsigned int esc;

  switch (rtn_code) {
    case LDR_SUCCESS:
      direcao[0] = '*';
      direcao[1] = '*';
      direcao[2] = '*';
      direcao[3] = '*';
      direcao[4] = '*';
      direcao[5] = '*';
      direcao[6] = '*';
      direcao[7] = '*';
      direcao[8] = '*';
      entrada = ByteArrayToStr(direcao);
      esc = Write(handle, entrada);
      if (esc == LDR_SUCCESS) TextOut (0, LCD_LINE4, "Escreveu!");
      else {
        NumOut(0, LCD_LINE4, esc);
        TextOut(0, LCD_LINE5, "NÃ£o escreveu!");
      }
      break;
    case LDR_FILEISBUSY:
      TextOut(0, LCD_LINE2, "File is Busy");
      break;
    case LDR_FILENOTFOUND:
      TextOut(0, LCD_LINE2, "File not found");
      break;
    case LDR_FILEEXISTS:
    le_arq();
      TextOut(0, LCD_LINE2, "File exists");
      break;
    case LDR_FILEISFULL:
      TextOut(0, LCD_LINE2, "File is full");
      break;

    default:
      NumOut (0, LCD_LINE2, rtn_code);
      TextOut(0, LCD_LINE4, "Erro!");
      break;
  }

  CloseFile(handle);

}

task main() {

  SetSensorLowspeed(US_chao_d);
  SetSensorLowspeed(US_chao_e);
  SetSensorLowspeed (HT_direita);
  SetSensorLowspeed (HT_esquerda);
  SetHTColor2Mode(HT_esquerda, HT_CMD_COLOR2_ACTIVE);
  SetHTColor2Mode(HT_direita, HT_CMD_COLOR2_ACTIVE);
  cria_arq();

  while(true){
    Andar();
    /*sobe_rampa();
    Plaza();
    desce_rampa();*/
  }
}
